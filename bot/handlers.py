    import logging
    from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
    from telegram.ext import (
        ContextTypes,
        CommandHandler,
        MessageHandler,
        filters,
        Application
    )

    # --- –î–ê–ù–ù–´–ï (–ó–ê–ü–û–õ–ù–ò –≠–¢–û) ---
    # –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤: { "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–¢–æ–≤–∞—Ä1", "–¢–æ–≤–∞—Ä2"], ... }
    CATEGORIES = {
        "üçï –ü–∏—Ü—Ü–∞": ["–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏", "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞", "–ì–∞–≤–∞–π—Å–∫–∞—è"],
        "ü•§ –ù–∞–ø–∏—Ç–∫–∏": ["–ö–æ–ª–∞", "–°–ø—Ä–∞–π—Ç", "–í–æ–¥–∞", "–°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π"],
        "üç∞ –î–µ—Å–µ—Ä—Ç—ã": ["–ß–∏–∑–∫–µ–π–∫", "–¢–∏—Ä–∞–º–∏—Å—É", "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ"]
        # –î–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    }

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ù–ï –ú–ï–ù–Ø–ï–¢–°–Ø –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    # –î–æ–±–∞–≤—å —Å—é–¥–∞ –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—ã –∏ —Ç.–¥.)
    WELCOME_MESSAGE = """
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã 
    –ó–¥–µ—Å—å –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π,
    –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ–≤–∞—Ä–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω –∏ —É—Å–ª–æ–≤–∏–π.

    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∞'.
    """

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    PAYMENT_INFO = """
    **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:**

    –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –æ–ø–ª–∞—Ç—ã.
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.
    """ # <-- –ó–ê–ü–û–õ–ù–ò –≠–¢–û–¢ –¢–ï–ö–°–¢

    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ö–ª–∞–≤–∏–∞—Ç—É—Ä ---

    def create_main_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –û–ø–ª–∞—Ç–∞."""
        keyboard_buttons = []
        category_names = list(CATEGORIES.keys())
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ä—è–¥
        for i in range(0, len(category_names), 2):
            row = [KeyboardButton(text=name) for name in category_names[i:i+2]]
            keyboard_buttons.append(row)
        # –ö–Ω–æ–ø–∫–∞ –û–ø–ª–∞—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        keyboard_buttons.append([KeyboardButton(text="–û–ø–ª–∞—Ç–∞")])
        return ReplyKeyboardMarkup(
            keyboard_buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é..."
        )

    def create_product_keyboard(category_name: str) -> ReplyKeyboardMarkup | None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
        if category_name not in CATEGORIES:
            return None # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏

        items = CATEGORIES[category_name]
        keyboard_buttons = []
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä—è–¥
        for i in range(0, len(items), 2):
            row = [KeyboardButton(text=item) for item in items[i:i+2]]
            keyboard_buttons.append(row)
        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        keyboard_buttons.append([KeyboardButton(text="< –ù–∞–∑–∞–¥")])
        return ReplyKeyboardMarkup(
            keyboard_buttons,
            resize_keyboard=True,
            input_field_placeholder=f"–¢–æ–≤–∞—Ä—ã –≤ '{category_name}'..."
        )

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        user = update.effective_user
        logging.info(f"User {user.id} ({user.username}) started the bot.")
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=create_main_keyboard()
        )

    async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥."""
        category_name = update.message.text
        user = update.effective_user
        logging.info(f"User {user.id} selected category: {category_name}")

        product_keyboard = create_product_keyboard(category_name)
        if product_keyboard:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: text=f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
            await update.message.reply_text(
                text=f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':", # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                reply_markup=product_keyboard
            )
        else:
            logging.warning(f"Category '{category_name}' not found for user {user.id}.")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_keyboard()
            )


    async def handle_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç)."""
        product_name = update.message.text
        user = update.effective_user
        logging.info(f"User {user.id} selected product: {product_name}")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É)
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_name}. (–ª–æ–≥–∏–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)")


    async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        user = update.effective_user
        logging.info(f"User {user.id} returned to main menu.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç: text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        await update.message.reply_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply_markup=create_main_keyboard()
        )

    async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ."""
        user = update.effective_user
        logging.info(f"User {user.id} requested payment info.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π, —á—Ç–æ –±—ã–ª–∞ (–≥–ª–∞–≤–Ω–∞—è).
        await update.message.reply_text(PAYMENT_INFO, parse_mode='Markdown')

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

    def setup_handlers(application: Application) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        all_product_names = [
            item for sublist in CATEGORIES.values() for item in sublist
        ]

        # –í–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–¥—É—Ç —Ä–∞–Ω—å—à–µ –æ–±—â–∏—Ö
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–û–ø–ª–∞—Ç–∞$') & ~filters.COMMAND, handle_payment))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^< –ù–∞–∑–∞–¥$') & ~filters.COMMAND, handle_back))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª—é—á–æ–º –≤ CATEGORIES)
        application.add_handler(MessageHandler(filters.TEXT & filters.In(CATEGORIES.keys()) & ~filters.COMMAND, handle_category))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤)
        if all_product_names: # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
             application.add_handler(MessageHandler(filters.TEXT & filters.In(all_product_names) & ~filters.COMMAND, handle_product))

        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        # async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
        #     await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        # application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown))
        
        logging.info("Handlers configured successfully.")