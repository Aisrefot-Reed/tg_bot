import logging
import re
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, User
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    Application,
    ConversationHandler
)
from telegram.helpers import escape_markdown # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
from config import ARTIST_CHAT_ID
from database.models import add_order # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

# --- –î–ê–ù–ù–´–ï ---
CATEGORIES = {
    "–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã": ["–°–∫–µ—Ç—á", "–õ–∞–π–Ω–∞—Ä—Ç", "–®–µ–π–¥", "–†–µ–Ω–¥–µ—Ä"],
    "–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π": ["–ü–æ—Ä—Ç—Ä–µ—Ç", "–•–∞–ª—Ñ–±–æ–¥–∏", "–§—É–ª–ª–±–æ–¥–∏", "–ß–∏–±–∏"],
    "–î–æ–ø. —É—Å–ª—É–≥–∏": ["–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑"]
}

# –°–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ
WELCOME_MESSAGE = """
üìù *–ü–†–ê–ô–°-–õ–ò–°–¢ –ù–ê –ó–ê–ö–ê–ó–´*

üìã *–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã*

_–°–∫–µ—Ç—á ............................ –æ—Ç 500‚ÇΩ_
_–õ–∞–π–Ω–∞—Ä—Ç .......................... –æ—Ç 600‚ÇΩ_
_–®–µ–π–¥ (—Å —Ç–µ–Ω—è–º–∏ –∏ –±–ª–∏–∫–∞–º–∏) ........ –æ—Ç 700‚ÇΩ_
_–†–µ–Ω–¥–µ—Ä (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ........ –æ—Ç 800‚ÇΩ_

üë§ *–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

_–ü–æ—Ä—Ç—Ä–µ—Ç (–ø–æ –ø–ª–µ—á–∏) ............... –æ—Ç 650‚ÇΩ_
_–•–∞–ª—Ñ–±–æ–¥–∏ (–ø–æ –ø–æ—è—Å/–¥–æ –±—ë–¥–µ—Ä) ...... –æ—Ç 750‚ÇΩ_
_–§—É–ª–ª–±–æ–¥–∏ (–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç) ......... –æ—Ç 850‚ÇΩ_
_–ß–∏–±–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å—Ç–∏–ª—å) .......... –æ—Ç 500‚ÇΩ_

üîç *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏*

_–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω ...................... + 300‚ÇΩ_
_–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ .......... + 350‚ÇΩ_
_–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ .................... + 300‚ÇΩ_

üí∞ *–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã*

_‚Ä¢ –û–ø–ª–∞—Ç–∞ –¥–µ–ª–∏—Ç—Å—è 50/50_
_‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (50%) - –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–µ—Ç—á–∞_
_‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ (50%) - –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã_

`–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–º –∑–∞–∫–∞–∑–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∏—Å—Å–∏–µ–π,        —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –µ—ë –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.`

‚è±Ô∏è *–î–µ–¥–ª–∞–π–Ω*

_‚Ä¢ –°—Ä–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã_
_‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º: –æ—Ç 1 –¥–æ 2 –Ω–µ–¥–µ–ª—å_

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∞', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –°–ü–û–°–û–ë–´ –æ–ø–ª–∞—Ç—ã:
"""
PAYMENT_INFO = """
üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
... (—Ç–≤–æ–∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã) ...
"""

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
SELECTING_BASE, SELECTING_FORMAT, SELECTING_EXTRAS, CONFIRMATION = range(4)
# –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å—Ä–∞–∑—É –Ω–∞–∂–∞–ª "–î–æ–ø. —É—Å–ª—É–≥–∏" (–Ω–µ –ª—É—á—à–∏–π –ø—É—Ç—å)
# SELECTING_ONLY_EXTRAS = range(4, 5) # –ü–æ–∫–∞ –Ω–µ –±—É–¥–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# (create_main_keyboard –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
def create_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard_buttons = []
    category_names = list(CATEGORIES.keys())
    num_categories = len(category_names)
    rows = (num_categories + 1) // 2
    idx = 0
    for _ in range(rows):
        row_buttons = []
        for _ in range(2):
            if idx < num_categories:
                row_buttons.append(KeyboardButton(text=category_names[idx]))
                idx += 1
        if row_buttons:
            keyboard_buttons.append(row_buttons)
    keyboard_buttons.append([KeyboardButton(text="–û–ø–ª–∞—Ç–∞")])
    return ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –û–ø–ª–∞—Ç—É...")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
def create_base_work_keyboard() -> ReplyKeyboardMarkup:
    items = CATEGORIES["–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã"]
    keyboard = [[KeyboardButton(text=item) for item in items[i:i+2]] for i in range(0, len(items), 2)]
    keyboard.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É...")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
def create_format_keyboard() -> ReplyKeyboardMarkup:
    items = CATEGORIES["–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"]
    keyboard = [[KeyboardButton(text=item) for item in items[i:i+2]] for i in range(0, len(items), 2)]
    keyboard.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç...")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ø. —É—Å–ª—É–≥
def create_extras_keyboard() -> ReplyKeyboardMarkup:
    items = CATEGORIES["–î–æ–ø. —É—Å–ª—É–≥–∏"]
    keyboard = [[KeyboardButton(text=item) for item in items[i:i+2]] for i in range(0, len(items), 2)]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –¥–æ–ø. —É—Å–ª—É–≥
    keyboard.append([KeyboardButton(text="–ì–æ—Ç–æ–≤–æ (–±–µ–∑ –¥–æ–ø. —É—Å–ª—É–≥)")])
    keyboard.append([KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–ø–æ–≤")]) # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–ª —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É
    keyboard.append([KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ...")


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ---

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É."""
    # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º–µ—Ç –∫–Ω–æ–ø–∫—É "–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã" –∏–ª–∏ "–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
    category_name = update.message.text
    user = update.effective_user
    logging.info(f"User {user.id} starts order process selecting '{category_name}'.")

    context.user_data['order'] = {'extras': []} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É*:",
        reply_markup=create_base_work_keyboard(),
        parse_mode='Markdown'
    )
    return SELECTING_BASE

async def select_base_work(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç."""
    base_work = update.message.text
    user = update.effective_user
    if base_work not in CATEGORIES["–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=create_base_work_keyboard())
        return SELECTING_BASE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    logging.info(f"User {user.id} selected base work: {base_work}")
    context.user_data['order']['base_work'] = base_work

    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–æ: {base_work}.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ *—Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*:",
        reply_markup=create_format_keyboard(),
        parse_mode='Markdown'
    )
    return SELECTING_FORMAT

async def select_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø. —É—Å–ª—É–≥–∏."""
    character_format = update.message.text
    user = update.effective_user
    if character_format not in CATEGORIES["–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.", reply_markup=create_format_keyboard())
        return SELECTING_FORMAT

    logging.info(f"User {user.id} selected format: {character_format}")
    context.user_data['order']['format'] = character_format

    await update.message.reply_text(
        f"–í—ã–±—Ä–∞–Ω–æ: {character_format}.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å *–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏*? –í—ã–±–µ—Ä–∏—Ç–µ –∏—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=create_extras_keyboard(),
        parse_mode='Markdown'
    )
    return SELECTING_EXTRAS

async def select_extras(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ø. —É—Å–ª—É–≥—É."""
    extra_service = update.message.text
    user = update.effective_user

    if extra_service in CATEGORIES["–î–æ–ø. —É—Å–ª—É–≥–∏"]:
        if extra_service not in context.user_data['order']['extras']:
            context.user_data['order']['extras'].append(extra_service)
            logging.info(f"User {user.id} added extra: {extra_service}")
            chosen_extras = ", ".join(context.user_data['order']['extras'])
            await update.message.reply_text(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {extra_service}.\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–ø. —É—Å–ª—É–≥–∏: {chosen_extras}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–ø–æ–≤'.",
                reply_markup=create_extras_keyboard() # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            await update.message.reply_text(
                f"–£—Å–ª—É–≥–∞ '{extra_service}' —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–ø–æ–≤'.",
                reply_markup=create_extras_keyboard()
            )
        return SELECTING_EXTRAS # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –¥–æ–ø–æ–≤
    else:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–µ –¥–æ–ø. —É—Å–ª—É–≥—É –∏ –Ω–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        await update.message.reply_text(
            "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥—É —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, '–ì–æ—Ç–æ–≤–æ (–±–µ–∑ –¥–æ–ø. —É—Å–ª—É–≥)', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–ø–æ–≤' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.",
            reply_markup=create_extras_keyboard()
        )
        return SELECTING_EXTRAS


async def finish_extras(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–ø. —É—Å–ª—É–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    user = update.effective_user
    action = update.message.text
    logging.info(f"User {user.id} finishing extras selection with action: '{action}'.")

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑
    order_data = context.user_data.get('order', {})
    base = order_data.get('base_work', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    fmt = order_data.get('format', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ')
    extras = order_data.get('extras', [])
    extras_str = ", ".join(extras) if extras else "–ù–µ—Ç"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å/–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å)
    summary = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"- –ë–∞–∑–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞: *{escape_markdown(base)}*\n"
        f"- –§–æ—Ä–º–∞—Ç: *{escape_markdown(fmt)}*\n"
        f"- –î–æ–ø. —É—Å–ª—É–≥–∏: *{escape_markdown(extras_str)}*\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Ö—É–¥–æ–∂–Ω–∏–∫—É?"
    )
    # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏–º/–æ—Ç–ø—Ä–∞–≤–∏–º
    logging.info(f"Order details for user {user.id}: Base='{base}', Format='{fmt}', Extras='{extras_str}'")

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    username = user.username if user.username else user.full_name # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –µ—Å–ª–∏ –Ω–µ—Ç @username
    order_id = add_order(user.id, username, base, fmt, extras)

    if order_id:
        # 2. –£–≤–µ–¥–æ–º–ª—è–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞
        user_mention = user.mention_markdown_v2() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        artist_message = (
            f"üé® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ \\! ID: {order_id}\n\n"
            f"*–û—Ç:* {user_mention} `({escape_markdown(str(user.id))})`\n"
            f"*–ë–∞–∑–∞:* {escape_markdown(base)}\n"
            f"*–§–æ—Ä–º–∞—Ç:* {escape_markdown(fmt)}\n"
            f"*–î–æ–ø\\. —É—Å–ª—É–≥–∏:* {escape_markdown(extras_str)}"
        )
        try:
            await context.bot.send_message(
                chat_id=ARTIST_CHAT_ID,
                text=artist_message,
                parse_mode='MarkdownV2'
            )
            logging.info(f"Notification for order {order_id} sent to artist {ARTIST_CHAT_ID}.")
            # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö—É–¥–æ–∂–Ω–∏–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=create_main_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ (ID: {order_id}) —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ö—É–¥–æ–∂–Ω–∏–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é.",
                reply_markup=create_main_keyboard()
            )
    else:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}.")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=create_main_keyboard()
        )

    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞."""
    user = update.effective_user
    logging.info(f"User {user.id} cancelled the order process.")
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await update.message.reply_text(
        "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=create_main_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    return ConversationHandler.END

# --- –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=create_main_keyboard(),
        parse_mode='Markdown'
    )

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã."""
    await update.message.reply_text(PAYMENT_INFO, parse_mode='Markdown')

async def handle_other_categories(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ '–î–æ–ø. —É—Å–ª—É–≥–∏' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)."""
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –≤—ã–±—Ä–∞–≤ '–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã'.",
        reply_markup=create_main_keyboard()
    )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –≤–∫–ª—é—á–∞—è ConversationHandler."""

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞
    order_conv_handler = ConversationHandler(
        entry_points=[
            # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞
            MessageHandler(filters.TEXT & filters.Regex(f'^({"|".join(map(re.escape, [k for k in CATEGORIES if k != "–î–æ–ø. —É—Å–ª—É–≥–∏"]))})$') & ~filters.COMMAND, start_order),
        ],
        states={
            SELECTING_BASE: [
                MessageHandler(filters.TEXT & filters.Regex(f'^({"|".join(CATEGORIES["–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã"])})$') & ~filters.COMMAND, select_base_work)
            ],
            SELECTING_FORMAT: [
                MessageHandler(filters.TEXT & filters.In(CATEGORIES["–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"]) & ~filters.COMMAND, select_format)
            ],
            SELECTING_EXTRAS: [
                MessageHandler(filters.TEXT & filters.In(CATEGORIES["–î–æ–ø. —É—Å–ª—É–≥–∏"]) & ~filters.COMMAND, select_extras),
                MessageHandler(filters.TEXT & filters.Regex(r'^(–ì–æ—Ç–æ–≤–æ \(–±–µ–∑ –¥–æ–ø\. —É—Å–ª—É–≥\)|–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –¥–æ–ø–æ–≤)$') & ~filters.COMMAND, finish_extras),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_order),
            MessageHandler(filters.TEXT & filters.Regex('^–û—Ç–º–µ–Ω–∞$') & ~filters.COMMAND, cancel_order),
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
            # MessageHandler(filters.TEXT & ~filters.COMMAND, unexpected_message_in_conv)
        ],
        # persistent=True, name="order_conversation" # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–û–ø–ª–∞—Ç–∞$') & ~filters.COMMAND, handle_payment))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è "–î–æ–ø. —É—Å–ª—É–≥–∏" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–î–æ–ø\. —É—Å–ª—É–≥–∏$') & ~filters.COMMAND, handle_other_categories))

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º ConversationHandler
    application.add_handler(order_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞) –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
    # async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.")
    # application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown))

    logging.info("Handlers configured with ConversationHandler for orders.")