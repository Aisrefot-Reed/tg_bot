    import logging
    import re
    from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
    from telegram.ext import (
        ContextTypes,
        CommandHandler,
        MessageHandler,
        filters,
        Application
    )

    # --- –î–ê–ù–ù–´–ï (–û–ë–ù–û–í–õ–ï–ù–´) ---

    # –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
    CATEGORIES = {
        "–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã": ["–°–∫–µ—Ç—á", "–õ–∞–π–Ω–∞—Ä—Ç", "–®–µ–π–¥", "–†–µ–Ω–¥–µ—Ä"],
        "–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π": ["–ü–æ—Ä—Ç—Ä–µ—Ç", "–•–∞–ª—Ñ–±–æ–¥–∏", "–§—É–ª–ª–±–æ–¥–∏", "–ß–∏–±–∏"],
        "–î–æ–ø. —É—Å–ª—É–≥–∏": ["–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑"] # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    }

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º –∏ –£–°–õ–û–í–ò–Ø–ú–ò –æ–ø–ª–∞—Ç—ã
    WELCOME_MESSAGE = """
    üìù *–ü–†–ê–ô–°-–õ–ò–°–¢ –ù–ê –ó–ê–ö–ê–ó–´*

    üìã *–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã*

    _–°–∫–µ—Ç—á ............................ –æ—Ç 500‚ÇΩ_
    _–õ–∞–π–Ω–∞—Ä—Ç .......................... –æ—Ç 600‚ÇΩ_
    _–®–µ–π–¥ (—Å —Ç–µ–Ω—è–º–∏ –∏ –±–ª–∏–∫–∞–º–∏) ........ –æ—Ç 700‚ÇΩ_
    _–†–µ–Ω–¥–µ—Ä (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ........ –æ—Ç 800‚ÇΩ_

    üë§ *–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

    _–ü–æ—Ä—Ç—Ä–µ—Ç (–ø–æ –ø–ª–µ—á–∏) ............... –æ—Ç 650‚ÇΩ_
    _–•–∞–ª—Ñ–±–æ–¥–∏ (–ø–æ –ø–æ—è—Å/–¥–æ –±—ë–¥–µ—Ä) ...... –æ—Ç 750‚ÇΩ_
    _–§—É–ª–ª–±–æ–¥–∏ (–≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç) ......... –æ—Ç 850‚ÇΩ_
    _–ß–∏–±–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Å—Ç–∏–ª—å) .......... –æ—Ç 500‚ÇΩ_

    üîç *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏*

    _–°–ª–æ–∂–Ω—ã–π —Ñ–æ–Ω ...................... + 300‚ÇΩ_
    _–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ .......... + 350‚ÇΩ_
    _–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ .................... + 300‚ÇΩ_

    üí∞ *–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã*

    _‚Ä¢ –û–ø–ª–∞—Ç–∞ –¥–µ–ª–∏—Ç—Å—è 50/50_
    _‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (50%) - –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–µ—Ç—á–∞_
    _‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ (50%) - –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã_

    `–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–º –∑–∞–∫–∞–∑–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∏—Å—Å–∏–µ–π,        —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –µ—ë –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.`

    ‚è±Ô∏è *–î–µ–¥–ª–∞–π–Ω*

    _‚Ä¢ –°—Ä–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã_
    _‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º: –æ—Ç 1 –¥–æ 2 –Ω–µ–¥–µ–ª—å_

    –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∞', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –°–ü–û–°–û–ë–´ –æ–ø–ª–∞—Ç—ã:
    """

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –°–ü–û–°–û–ë–ê–• –æ–ø–ª–∞—Ç—ã (–ó–ê–ü–û–õ–ù–ò –≠–¢–û)
    PAYMENT_INFO = """
    üí≥ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å, –∫–∞–∫ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞—à–∏ —É—Å–ª—É–≥–∏.
    –ù–∞–ø—Ä–∏–º–µ—Ä:
    - –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫ (–Ω–æ–º–µ—Ä ...)
    - –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–Ω–æ–º–µ—Ä ...)
    - –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–°–ë–ü) –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ...
    - (–î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã, –µ—Å–ª–∏ –µ—Å—Ç—å)

    –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—á–µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!
    """ # <-- –ó–ê–ü–û–õ–ù–ò –≠–¢–û–¢ –¢–ï–ö–°–¢

    # --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ö–ª–∞–≤–∏–∞—Ç—É—Ä ---

    def create_main_keyboard() -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –û–ø–ª–∞—Ç–∞."""
        keyboard_buttons = []
        category_names = list(CATEGORIES.keys()) # –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç "–î–æ–ø. —É—Å–ª—É–≥–∏"
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä—è–¥–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2)
        num_categories = len(category_names)
        rows = (num_categories + 1) // 2 # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

        idx = 0
        for _ in range(rows):
            row_buttons = []
            for _ in range(2):
                if idx < num_categories:
                    row_buttons.append(KeyboardButton(text=category_names[idx]))
                    idx += 1
            if row_buttons:
                 keyboard_buttons.append(row_buttons)

        # –ö–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—Ç–∞" –≤—Å–µ–≥–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        keyboard_buttons.append([KeyboardButton(text="–û–ø–ª–∞—Ç–∞")])
        return ReplyKeyboardMarkup(
            keyboard_buttons,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –û–ø–ª–∞—Ç—É..."
        )

    def create_product_keyboard(category_name: str) -> ReplyKeyboardMarkup | None:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏/—É—Å–ª—É–≥–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
        if category_name not in CATEGORIES:
            return None

        items = CATEGORIES[category_name]
        keyboard_buttons = []
        # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –≤ —Ä—è–¥
        for i in range(0, len(items), 2):
            row = [KeyboardButton(text=item) for item in items[i:i+2]]
            keyboard_buttons.append(row)
        # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
        keyboard_buttons.append([KeyboardButton(text="< –ù–∞–∑–∞–¥")])
        return ReplyKeyboardMarkup(
            keyboard_buttons,
            resize_keyboard=True,
            input_field_placeholder=f"–û–ø—Ü–∏–∏ –≤ '{category_name}'..."
        )

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        user = update.effective_user
        logging.info(f"User {user.id} ({user.username}) started the bot.")
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=create_main_keyboard(),
            parse_mode='Markdown'
        )

    async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ –∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥."""
        category_name = update.message.text
        user = update.effective_user
        logging.info(f"User {user.id} selected category: {category_name}")

        product_keyboard = create_product_keyboard(category_name)
        if product_keyboard:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            text_prefix = "–í–∏–¥—ã —Ä–∞–±–æ—Ç" if category_name in ["–ë–∞–∑–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã", "–§–æ—Ä–º–∞—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"] else "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏"
            await update.message.reply_text(
                text=f"{text_prefix} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':",
                reply_markup=product_keyboard
            )
        else:
            logging.warning(f"Category '{category_name}' not found for user {user.id}.")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=create_main_keyboard()
            )

    async def handle_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç)."""
        product_name = update.message.text
        user = update.effective_user
        logging.info(f"User {user.id} selected product/service: {product_name}")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product_name}. (–ª–æ–≥–∏–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞)")

    async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        user = update.effective_user
        logging.info(f"User {user.id} returned to main menu.")
        await update.message.reply_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_keyboard()
        )

    async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –°–ü–û–°–û–ë–ê–• –æ–ø–ª–∞—Ç—ã."""
        user = update.effective_user
        logging.info(f"User {user.id} requested payment methods.")
        await update.message.reply_text(
            PAYMENT_INFO, # –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
            parse_mode='Markdown'
        )

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

    def setup_handlers(application: Application) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è Regex —Å —É—á–µ—Ç–æ–º "–î–æ–ø. —É—Å–ª—É–≥–∏"
        category_keys_pattern = "|".join(map(re.escape, CATEGORIES.keys()))
        all_product_names = [
            item for sublist in CATEGORIES.values() for item in sublist
        ]
        product_names_pattern = "|".join(map(re.escape, all_product_names)) if all_product_names else None

        # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: –ö–æ–º–∞–Ω–¥–∞ -> –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è -> –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ -> –¢–æ–≤–∞—Ä—ã/–£—Å–ª—É–≥–∏
        application.add_handler(CommandHandler("start", start))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∞" (—Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã)
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^–û–ø–ª–∞—Ç–∞$') & ~filters.COMMAND, handle_payment))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "< –ù–∞–∑–∞–¥"
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^< –ù–∞–∑–∞–¥$') & ~filters.COMMAND, handle_back))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è "–î–æ–ø. —É—Å–ª—É–≥–∏")
        if category_keys_pattern:
            application.add_handler(MessageHandler(
                filters.TEXT & filters.Regex(f'^({category_keys_pattern})$') & ~filters.COMMAND,
                handle_category
            ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–ø. —É—Å–ª—É–≥
        if product_names_pattern:
            application.add_handler(MessageHandler(
                filters.TEXT & filters.Regex(f'^({product_names_pattern})$') & ~filters.COMMAND,
                handle_product
            ))

        logging.info("Handlers reconfigured successfully (Payment Conditions in Welcome, Payment Methods on button).")